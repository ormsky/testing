<!-- views/pages/index.ejs -->

<!DOCTYPE html>
<html lang="en">
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <!--   % include ../partials/head %  -->

  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>


  <script src="/public/javascript/socket.io/socket.io.js"></script>


<style>
.affix {
      top: 0;
      width: 100%;
      z-index: 9999 !important;
  }

  .affix + .container-fluid {
      padding-top: 70px;
  }}
</style>

</head>
<body>

<div class="container" data-spy="affix" style="background-color:Navy;color=White">

<div id="nowplaying" style="color:White">Welcome!</div>
<div>
    <button onclock="clickPlay();" type="button" class="btn btn-default">
      <span class="glyphicon glyphicon-play"></span>
    </button>
    <button onclick="clickPause();" type="button" class="btn btn-default">
      <span class="glyphicon glyphicon-pause"></span>
      <span class="glyphicon glyphicon-play"></span>
    </button>
    <button onclick="clickStop();" type="button" class="btn btn-default">
      <span class="glyphicon glyphicon-stop"></span>
    </button>
    <button onclick="clickBackward();" type="button" class="btn btn-default">
      <span class="glyphicon glyphicon-fast-backward"></span>
    </button>
    <button onclick="clickForward();" type="button" class="btn btn-default">
      <span class="glyphicon glyphicon-fast-forward"></span>
    </button>
</div>

</div>





<div class="container-fluid" >

<div class="row">
  <div class="col-sm-12 dropdown">
    <button id="deviceListHeader" class="btn btn-primary dropdown-toggle" type="button" data-toggle="dropdown">Media Device
    <span class="caret"></span></button>
    <ul id="deviceList" class="dropdown-menu">
      <li><a href="#">Please wait.....</a></li>
    </ul>
  </div>
</div>



<div class="container-fluid">

  <ul id="tabheaders" class="nav nav-tabs">
    <li class="active"><a data-toggle="tab" href="#tab1">Home</a></li>
  </ul>

  <div id="tabpanes" class="tab-content">
    <div id="tab1" class="tab-pane fade in active">
      <ul id="menu1" class="nav nav-pills nav-stacked"></ul>
    </div>
  </div>


</div>

<div id="audio-player-container">
<audio id="audio-player" width="400"
  playsinline="true"
  autoplay=""
/>
</div>


</div> <!-- /container -->

<script>

var audioPlayer = document.getElementById('audio-player');

function localPlay() {
  audioPlayer.play();
}

function localPause() {
  if ( audioPlayer.paused ) {
    audioPlayer.play();
  } else {
    audioPlayer.pause();
  }
}



function getParameterByName(name, url) {
  if (!url) url = window.location.href;
  name = name.replace(/[\[\]]/g, '\\$&');
  var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
      results = regex.exec(url);
  if (!results) return null;
  if (!results[2]) return '';
  return decodeURIComponent(results[2].replace(/\+/g, ' '));
}


var connectionnumber;
var socketUrl = window.location.protocol+'//'+window.location.hostname+':3001';
var alias = getParameterByName( "alias" );
// alias = ( alias ? alias : "Unknown" );
var socket = io.connect(socketUrl, { query: { media_player_alias : alias } } );


//alert(window.location);

var id = null;
var devices = null;
var activeDevice = null;

function setDevice(index) {
  var d = devices[index];
  activeDevice = d;
  updateStatus();
}

socket.on('connect', function() {
  id = socket.id;
  updateStatus();
});



function clickPause() {
  if (activeDevice.id == id) {
    localPause();
  } else {
    socket.emit( "pauseMedia", { player: activeDevice.id } );
  }
}

function clickPlay() {
  if (activeDevice.id == id) {
  } else {
  }
}

function clickForward() {
  playNext();
}

function clickBackward() {
}


function deviceName(d) {
  if (!d) { return "*Undefined*"; }
  return d.name;
//  if (d.id == id) {
//    return "Local (this device)";
//  } else {
//    return d.name; //+" ("+d.id+")";
//  }
}

function updateStatus() {
  $('#status').html("Status: Connected as ["+id+"]");
  var d = activeDevice;
  $("#deviceListHeader").html("Media Device: "+deviceName(d)+" <span class='caret'></span>");
}

/*
socket.on('handle', function(data) {
  activeDevice = data;
  handle = data.handle;
  updateStatus();
  socket.emit('get_connections');
});
*/

socket.on('connections', function(data) {
  devices = data;
  devices[socket.id] = { id: socket.id, name: 'Local (this device)' };
  var ul = $("#deviceList");
  $(ul).empty();
  $(ul).append("<li onclick='setDevice(\""+socket.id+"\")'><a href='#'>Local (this device)</a></li>");
  for (var i in data) {
    var d = data[i];
    if ( d.id != socket.id ) {
      $(ul).append("<li onclick='setDevice(\""+d.id+"\")'><a href='#'>"+deviceName(d)+"</a></li>");
    }
  }
//  $("#connections").html( JSON.stringify(data) );
  if (activeDevice===null) { setDevice(socket.id); }
});

socket.on('pauseMedia', function(data) {
  if (data.player == id) {
    localPause();
  }
});



socket.on('playMedia', function(data) {
  if (data.player == id) {
    $('#player').html("PLAYER play request received for ME! "+data.action+' - '+data.dataId+' - '+data.text);

    queueAudio(data.dataId, data.text);

    //var x = document.getElementById('audio-player');
    //x.src="";

    //x.src = 'media?id='+data.dataId;
    //x.play();

    //$('#nowplaying').html("Now playing:"+data.text);

  }
});

var audioQueue = [];

// Queue audio for local player
function queueAudio(mediaId, text) {
  // Add metadata to queue
  audioQueue.push( {"mediaId":mediaId, "text":text} );
  if (!audioPlayer.currentSrc) { playAudioQueue(); }
}

function notifyStatus() {
  // Tell everyone what's playing!
  var p = audioQueue[0].text;
  if (!p) {
    p = "Not playing.";
  } else {
    p = "Now playing: "+p;
  }
  socket.emit("emit", {"action":"mediaStatus", "player":id, "text":p});
}


function playAudioQueue() {
  audioPlayer.src="";
  var t=audioQueue[0];
  if (!t) { return; }
  audioPlayer.src = 'media?id='+t.mediaId;
  audioPlayer.play();
  notifyStatus();
}

audioPlayer.onended = function() {
  playNext();
}

function playNext() {
  audioQueue.shift(); // remove first element from queue
  playAudioQueue(); // play the next track in the queue
}


function updateMediaStatus(data) {
  if (data.player == activeDevice.id) {
    $('#nowplaying').html(data.text);
  }
}

socket.on('emit', function(data) {
  switch (data.action) {
    case "mediaStatus":
      updateMediaStatus(data);
      break;
  }
});


function safeText(text) {
  if (!text) { return null; }
  var result = JSON.stringify(text);
  // remove the quotes that stringify adds in
  return result.substring(1,result.length - 1);
}

var menuData = [];


function processMenuData(target_tab_index,menudata,offset) {
  if (menudata && menudata.action == "stream") {
    menudata.player = activeDevice.id;
    socket.emit('requestPlayMedia', menudata);
//    alert("stream "+menudata.dataId);
  } else {
    loadMenuData(target_tab_index, menudata, offset);
  }
}

function loadMenuData(target_tab_index,menudata,offset) {
  var uri = "http://dev1.ormsky.org:8080/menu.json";
  var title = ( menudata ? menudata.text : 'Home' );
  if (menudata)
  {
    var d = menudata; //menuData[tabindex][menuindex];
    var id = safeText(d.subMenu);
    var keys = d.keys;
    if (id) { uri += "?id="+id; }
    if (keys) { uri += "&keys="+JSON.stringify(keys); }
  }
  $.getJSON( uri, function (data) {
    if (menudata && menudata.action == "stream") {
      alert('stream!');
    } else {
      // store the menu items
      menuData.length = target_tab_index+1;
      menuData[target_tab_index] = data;
      // construct html
      addNewMenuTab(title,target_tab_index);
      var x = getTab(target_tab_index);
      $(x).html( getMenuAsHtml(data,target_tab_index) );
    }
  });
};


function getMenuAsHtml(data,tabIndex) {
    //data = menuData[tabIndex];
    // construct html
    var mdivs = '<ul class="click-select nav nav-pills nav-stacked">';
    for (var i in data.items) {
      var d = data.items[i];
      //var mid = safeText(d.subMenu);
      //menuData[target_tab_index][i] = d;
      var mtext = safeText(d.text);
      var mkeys = ((d.keys) ? $.param({keys : d.keys}) : '');
      mdivs += '<li'
        + ' data-tabindex="'+tabIndex+'"'
        + ' data-menuindex="'+i+'"'
        + ' data-action="'+d.action+'"'
        + ' onclick="handleMenuClick('+tabIndex+','+i+')"'
        + ' class="menuItem'+((i==0)?' active':'')+'"'
        + '><a>'+mtext+'</a></li>';
    }
    mdivs += "</ul>";

    return mdivs;
//    var x = getActiveTab();
//    var x = getTab(target_tab_index);
//    $(x).html( mdivs );
}


function handleMenuClick(tabindex,menuindex) {
  selectMenuItem(tabindex,menuindex);
  var d = menuData[tabindex].items[menuindex];

  processMenuData(tabindex+1,d,0);

//  var action = d.action;

//  if (action == "stream") {
//    alert("PLAY!");
//  } else {
//    selectMenuItem(tabindex,menuindex);
//    addNewMenu( d, tabindex+1);
//  }
}


function activateSelectedMenuItem() {
  var activeMenu = getActiveTabActiveMenuItem();

  var menuItem = activeMenu.first();
  var tabi = parseInt(menuItem.attr("data-tabindex"));
  var menui = parseInt(menuItem.attr("data-menuindex"));

  handleMenuClick(tabi,menui);
}

function selectMenuItem(tabindex,menuindex) {
  $(getTab(tabindex)).find("li").removeClass("active");
  $(getTabMenuItem(tabindex,menuindex)).addClass("active");
}

function selectMenuItem2(itemId) {
  var d = getActiveTabActiveMenuItem();
  $(d).removeClass("active");
  var m = $("#"+itemId);
  $(m).addClass("active");
}


function addNewMenuTab(title, target_tab_index) {
  //var d = menuData[i];
  var title = safeText(title);

  var th = $("#tabheaders");
  var tp = $("#tabpanes");

  var z1 = $(th).find("li");
  var z2 = $(z1).slice(target_tab_index);
  $(z2).remove();
  //$($(th).slice(target_tab_index)).remove();
  z1 = $(tp).find(".tab-pane");
  z2 = $(z1).slice(target_tab_index);
  $(z2).remove();
  //$($(tp).slice(target_tab_index)).remove();

//  var oldActiveHeader = th.find("li")[target_tab_index-1;
//  var oldActivePane = tp.find(".tab-pane.active");

  th.append("<li class='active'><a data-toggle='tab' href='#pane_"+target_tab_index+"'>"+title+"</a></li>");
  tp.append(
  '<div id="pane_'+target_tab_index+'" class="tab-pane fade in active"> \
    <ul class="nav nav-pills nav-stacked"></ul> \
   </div> \
  ');

  var x1 = $(th).find("li");
  var x2 = $(x1).slice(0,target_tab_index);
  $(x2).removeClass("active");

  x1 = $(tp).find(".tab-pane");
  x2 = $(x1).slice(0,target_tab_index);
  $(x2).removeClass("active");


//  oldActiveHeader.removeClass("active");
//  oldActivePane.removeClass("active");

//  displayMenu(target_tab_index, menu_data);
//  var x = getTab(target_tab_index);
  //$(x).html( getMenuAsHtml(target_tab_index) );
//  $(x).html( getMenuAsHtml(menu_data) );
}

function getTab(tabindex) {
  return $("#tabpanes").find(".tab-pane")[tabindex];
}

function getTabMenuItem(tabindex,menuindex) {
  return $(getTab(tabindex)).find("li")[menuindex];
}

function getActiveTab() {
  return $("#tabpanes").find(".tab-pane.active");
}

function getActiveTabActiveMenuItem() {
  return getActiveTab().find("li.active");
}


function menuBack() {
  var activeMenu = getActiveTabActiveMenuItem();

  var menuItem = activeMenu.first();
  var tabi = parseInt(menuItem.attr("data-tabindex"));
  if (tabi==0) { return; }

  var th = $("#tabheaders");
  var tp = $("#tabpanes");
  var x1 = $(th).find("li.active");
  var x2 = x1.prev();
  $(x1).removeClass("active");
  $(x2).addClass("active");

  x1 = $(tp).find(".tab-pane.active");
  x2 = x1.prev();;
  $(x1).removeClass("active");
  $(x2).addClass("active");
}


function handleKeyPress( keycode ) {
  console.log("keycode");
  console.log(keycode);
  var activeMenu = getActiveTabActiveMenuItem();
  var newItem;
  if (keycode==40) {
    newItem = activeMenu.next();
  } else if (keycode==38) {
    newItem = activeMenu.prev();
  } else if (keycode == 27) {
    menuBack();
  } else if (keycode == 13) {
    activateSelectedMenuItem();
    //var id = activeMenu.first().attr("id");
    //activateMenuItem(id);
  }
  if (newItem && newItem.length>0) {
    $(activeMenu).removeClass("active");
    $(newItem).addClass("active");
    // selectMenuItem2( newItem[0].id );
  }
}



socket.on('play audio', function (data) {
  //if (data.id != connectionnumber) {return;}
  var ct = data["content-type"];
  if (ct.startsWith('audio')) {
    var ap = document.getElementById('audioplayer');
    ap.setAttribute("src",data.source);
    ap.play();
  } else {
    var ap = document.getElementById('videoplayer');
    ap.setAttribute("src",data.source);
    ap.play();
  }
});


$(function() {

  processMenuData( 0, null, 0 );

  $("ul").on( "click", "li.click-select", function(x) { selectMenuItem(this.data-tabindex,this.data-menuindex); } );

  $(document).on("keydown", function(event) { handleKeyPress( event.keyCode? event.keyCode : event.which); });

  //socket.emit('request_handle', { name: 'chrome', publicPlayer: true } );
});

</script>


</body>
</html>


